<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--节点1-->
    <bean id="service1" class="java.net.InetSocketAddress">
        <!--配置ip-->
        <constructor-arg>
            <value>127.0.0.1</value>
        </constructor-arg>
        <!--配置端口号-->
        <constructor-arg>
            <value>11210</value>
        </constructor-arg>
    </bean>
    <!--节点2-->
    <bean id="service2" class="java.net.InetSocketAddress">
        <!--配置ip-->
        <constructor-arg>
            <value>127.0.0.1</value>
        </constructor-arg>
        <!--配置端口号-->
        <constructor-arg>
            <value>11211</value>
        </constructor-arg>
    </bean>
    <!--节点3-->
    <bean id="service3" class="java.net.InetSocketAddress">
        <!--配置ip-->
        <constructor-arg>
            <value>127.0.0.1</value>
        </constructor-arg>
        <!--配置端口号-->
        <constructor-arg>
            <value>11212</value>
        </constructor-arg>
    </bean>
    <bean name="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder">
        <constructor-arg>
            <!-- # 服务器节点:形如："主节点1:port,备份节点1:port 主节点2:port,备份节点2:port"的字符串， #可以不设置备份节点，主备节点逗号隔开，不同分组空格隔开
                 #由于该应用功能是加载数据，可以只考虑分布式，即以空格分隔ip的配置方式，不考虑主备关系 -->
            <list>
                <ref bean="service1"/>
                <ref bean="service2"/>
                <ref bean="service3"/>
            </list>
            <!--service1 是主 service2是备-->
            <!--<map>
                <entry key-ref="service1" value-ref="service2"/>
                <entry>
                    <key>
                        <ref bean="service3"/>
                    </key>
                    <null></null>
                </entry>
            </map>-->
        </constructor-arg>
        <!-- # 与servers对应的节点的权重,格式同服务器节点,权重是用来调节memcached的负载，设置的权重越高， 该memcached节点存储的数据将越多，所承受的负载越大。
        xmemcached的权重是通过复制连接的多个引用来实现的，比如权重为3，那么就复制3个同一个连接的引用放在集合中让MemcachedSessionLocator查找。 -->
        <constructor-arg>
            <list>
                <value>1</value>
                <value>1</value>
                <value>1</value>
            </list>
        </constructor-arg>
        <!--nio连接池大小,默认对一个memcached节点只有一个连接，这在通常情况 下已经有非常优异的表现。但是在典型的高并发环境下,nio的单连接也会遇到性能瓶颈。可通过调整
            连接池数量,允许建立多个连接到同一个memcached节点，但是请注意，这些连接之间是不同步的， 因此你的应用需要自己保证数据更新的同步-->
        <property name="connectionPoolSize" value="2"/>
        <!--failureMode=false 是否启用failure模式，true为启用，默认不启用。所谓failure模式是指，当一个memcached节点down掉的时候，发往这个节点的请求将直接失败，而不是发送给下一个有效的memcached节点。-->
        <property name="failureMode" value="false"/>
        <!--连接等待时间-->
        <property name="connectTimeout" value="1000"/>
        <!-- (1) 协议工厂 net.rubyeye.xmemcached.command.BinaryCommandFactory(二进制)
             (2) 协议工厂 net.rubyeye.xmemcached.command.TextCommandFactory(文本)
             (3) 协议工厂 net.rubyeye.xmemcached.command.KestrelCommandFactory(可靠获取) -->
        <property name="commandFactory">
            <bean class="net.rubyeye.xmemcached.command.BinaryCommandFactory"/>
        </property>
        <!-- (1) net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator 分布策略，一致性哈希（用于增加主机时降低未命中率问题的解决）
             (2) ArrayMemcachedSessionLocator(默认) ,默认分布的策略是按照key的哈希值模以连接数得到的余数，对应的连接就是将要存储的节点,
                 本应用只需使用默认策略即可。 -->
        <property name="sessionLocator">
            <bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"/>
        </property>
        <!-- # 序列化转换器，默认使用net.rubyeye.xmemcached.transcoders.SerializingTranscoder -->
        <property name="transcoder">
            <bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder"/>
        </property>
    </bean>
    <!-- 当一个memcached节点down掉的时候，发往这个节点的请求将直接失败，而不是发送给下一个有效的memcached节点。 -->
    <bean name="memcachedClient" factory-bean="memcachedClientBuilder" factory-method="build"
          destroy-method="shutdown"/>
</beans>